[
  {
    "objectID": "notebooks/notebooks.html",
    "href": "notebooks/notebooks.html",
    "title": "Notebooks",
    "section": "",
    "text": "Here are the available notebooks:\n\nData from Internal"
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/index.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/index.html",
    "title": "Going Further with Coding",
    "section": "",
    "text": "This path builds on what you’ve already learned: you’ll bring in data in different ways, work with it (filter, sort, compute), and then turn it into clear visuals that help you notice patterns and stories.\nIn thinking about this work, one helpful model is Input → Process → Output. It reminds us that any data task involves three stages:\nUse this model to guide your learning in this section — it helps you see why each step matters before moving on.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/index.html#input-methods",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/index.html#input-methods",
    "title": "Going Further with Coding",
    "section": "Input Methods",
    "text": "Input Methods\nExplore different ways to bring data into your coding environment: using internal data structures, CSV, Excel, Google Sheets, or pulling tables from web pages.\nCorresponds with the following lessons:\nData‑from‑internal • data‑from‑csv • data‑from‑excel • data‑from‑google‑sheet • data‑from‑webpage (in the Data‑Dunkers lessons repo)",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/index.html#process-data",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/index.html#process-data",
    "title": "Going Further with Coding",
    "section": "Process Data",
    "text": "Process Data\nLearn how to shape your data: choose columns, apply filters, sort rows, add new computed columns, and use quick summary statistics so you understand your data before graphing.\nCorresponds with the following lessons:\ndata‑columns • data‑filtering • data‑sorting • data‑new‑columns • data‑statistics",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/index.html#output-visualizations",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/index.html#output-visualizations",
    "title": "Going Further with Coding",
    "section": "Output Visualizations",
    "text": "Output Visualizations\nConvert cleaned data into visuals that highlight insights and comparisons: bar graphs, line and scatter plots, pie charts, histograms, etc.\nCorresponds with the following lessons:\ngraphing‑bar‑graphs • graphing‑scatter‑plots • graphing‑pie‑charts • graphing‑histograms",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/index.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/index.html",
    "title": "Overview",
    "section": "",
    "text": "Turn your processed tables into clear visuals students can read and explain. Each page below focuses on a core chart type you’ll re-use across activities.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Output",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/index.html#creating-bar-graphs",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/index.html#creating-bar-graphs",
    "title": "Overview",
    "section": "Creating Bar Graphs",
    "text": "Creating Bar Graphs\nCompare values across categories (e.g., attempts by distance or makes by player) with simple, labeled bars for fast pattern-spotting.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/graphing-bar-graphs.ipynb.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Output",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/index.html#creating-line-and-scatter-plots",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/index.html#creating-line-and-scatter-plots",
    "title": "Overview",
    "section": "Creating Line and Scatter Plots",
    "text": "Creating Line and Scatter Plots\nShow change or relationships: lines for trends over an ordered axis; scatter to explore how two variables move together.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/graphing-scatter-plots.ipynb.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Output",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/index.html#creating-pie-charts",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/index.html#creating-pie-charts",
    "title": "Overview",
    "section": "Creating Pie Charts",
    "text": "Creating Pie Charts\nDisplay proportions of a whole (used sparingly) to highlight simple “share of total” stories.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/graphing-pie-charts.ipynb.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Output",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/index.html#creating-histograms",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/index.html#creating-histograms",
    "title": "Overview",
    "section": "Creating Histograms",
    "text": "Creating Histograms\nReveal the distribution of a numeric variable (e.g., shot distance or points per game) to see clustering, spread, and outliers.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/graphing-histograms.ipynb.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Output",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/03C-pie-charts.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/03C-pie-charts.html",
    "title": "Creating Pie Charts",
    "section": "",
    "text": "Display proportions of a whole (used sparingly) to highlight simple “share of total” stories.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/graphing-pie-charts.ipynb.\n\nLesson coming soon!",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Output",
      "Creating Pie Charts"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/03A-bar-graphs.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/03A-bar-graphs.html",
    "title": "Creating Bar Graphs",
    "section": "",
    "text": "Compare values across categories (e.g., attempts by distance or makes by player) with simple, labeled bars for fast pattern-spotting.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/graphing-bar-graphs.ipynb.\n\nLesson coming soon!",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Output",
      "Creating Bar Graphs"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02F-cleaning-basics.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02F-cleaning-basics.html",
    "title": "Cleaning the Data (Basics)",
    "section": "",
    "text": "A light scrub after core table skills: standardize column names/case, coerce numeric columns used in sorts/percentages, and drop empty rows so charts and stats don’t break. Informed by the table/analysis lessons here:\n\nhttps://github.com/Data-Dunkers/lessons/blob/main/data-columns.ipynb\nhttps://github.com/Data-Dunkers/lessons/blob/main/data-filtering.ipynb\nhttps://github.com/Data-Dunkers/lessons/blob/main/data-sorting.ipynb\nhttps://github.com/Data-Dunkers/lessons/blob/main/data-new-columns.ipynb\nhttps://github.com/Data-Dunkers/lessons/blob/main/data-statistics.ipynb (GitHub)\n\n\nLesson coming soon!",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Cleaning the Data (Basics)"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02D-new-columns.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02D-new-columns.html",
    "title": "Creating New Columns",
    "section": "",
    "text": "In this lesson, we’ll learn how to create new columns in a Pandas DataFrame. New columns can be made by combining or transforming existing columns to generate more meaningful statistics.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Creating New Columns"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02D-new-columns.html#when-to-create-new-columns",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02D-new-columns.html#when-to-create-new-columns",
    "title": "Creating New Columns",
    "section": "When to Create New Columns",
    "text": "When to Create New Columns\nSometimes the dataset doesn’t include the exact information you need. By performing calculations on existing columns, you can create new ones — such as averages, totals, or percentages — to reveal additional insights.\n\nStep 1 — Import Libraries and Load Data\nWe’ll use Pandas to load Raptors team data from a CSV file into a DataFrame.\n\n\nCode\n# Setup\nimport pandas as pd\n\n# Input: Load Raptors data into a DataFrame\nurl = \"https://github.com/Data-Dunkers/data/raw/refs/heads/main/NBA/raptors-2023.csv\"\ndf = pd.read_csv(url)\n\n# Reduce the DataFrame to essential columns\ncolumns = [\"Player\", \"G\", \"MP\", \"FG%\", \"FT%\"]\ndf_small = df[columns]\n\n# Preview\ndf_small.head()\n\n\n\n\n\n\n\n\n\nPlayer\nG\nMP\nFG%\nFT%\n\n\n\n\n0\nChristian Koloko\n58.0\n13.8\n0.480\n0.627\n\n\n1\nChris Boucher\n307.0\n18.4\n0.486\n0.780\n\n\n2\nDalano Banton\n95.0\n10.3\n0.416\n0.632\n\n\n3\nFred VanVleet\n417.0\n29.7\n0.402\n0.869\n\n\n4\nGary Trent Jr.\n270.0\n28.9\n0.421\n0.827\n\n\n\n\n\n\n\n\n\nStep 2 — Create a New Column\nWe can create a new column called Shot Average (%) by averaging the Field Goal Percentage (FG%) and Free Throw Percentage (FT%).\n\n\nCode\n# Create a new column by averaging FG% and FT%\ndf_small[\"Shot Average (%)\"] = (df[\"FG%\"] + df[\"FT%\"]) / 2\n\n# Display selected columns\ndf_small[[\"Player\", \"FG%\", \"FT%\", \"Shot Average (%)\"]]\n\n\n\n\n\n\n\n\n\nPlayer\nFG%\nFT%\nShot Average (%)\n\n\n\n\n0\nChristian Koloko\n0.480\n0.627\n0.5535\n\n\n1\nChris Boucher\n0.486\n0.780\n0.6330\n\n\n2\nDalano Banton\n0.416\n0.632\n0.5240\n\n\n3\nFred VanVleet\n0.402\n0.869\n0.6355\n\n\n4\nGary Trent Jr.\n0.421\n0.827\n0.6240\n\n\n5\nJakob Poeltl\n0.628\n0.536\n0.5820\n\n\n6\nJeff Dowtin\n0.398\n0.727\n0.5625\n\n\n7\nJoe Wieskamp\n0.329\n0.538\n0.4335\n\n\n8\nMalachi Flynn\n0.374\n0.752\n0.5630\n\n\n9\nOG Anunoby\n0.471\n0.744\n0.6075\n\n\n10\nOtto Porter Jr.\n0.478\n0.797\n0.6375\n\n\n11\nPascal Siakam\n0.487\n0.774\n0.6305\n\n\n12\nPrecious Achiuwa\n0.474\n0.605\n0.5395\n\n\n13\nRon Harper Jr.\n0.500\n1.000\n0.7500\n\n\n14\nScottie Barnes\n0.473\n0.755\n0.6140\n\n\n15\nThaddeus Young\n0.503\n0.663\n0.5830\n\n\n16\nWill Barton\n0.430\n0.787\n0.6085\n\n\n\n\n\n\n\n\n\nStep 3 — Round the New Column\nTo make the new column easier to read, we can round it to one decimal place.\n\n\nCode\n# Round the Shot Average column to one decimal place\ndf_small[\"Shot Average (%)\"] = df_small[\"Shot Average (%)\"].round(1)\n\n# Display selected columns\ndf_small[[\"Player\", \"FG%\", \"FT%\", \"Shot Average (%)\"]]\n\n\n\n\n\n\n\n\n\nPlayer\nFG%\nFT%\nShot Average (%)\n\n\n\n\n0\nChristian Koloko\n0.480\n0.627\n0.6\n\n\n1\nChris Boucher\n0.486\n0.780\n0.6\n\n\n2\nDalano Banton\n0.416\n0.632\n0.5\n\n\n3\nFred VanVleet\n0.402\n0.869\n0.6\n\n\n4\nGary Trent Jr.\n0.421\n0.827\n0.6\n\n\n5\nJakob Poeltl\n0.628\n0.536\n0.6\n\n\n6\nJeff Dowtin\n0.398\n0.727\n0.6\n\n\n7\nJoe Wieskamp\n0.329\n0.538\n0.4\n\n\n8\nMalachi Flynn\n0.374\n0.752\n0.6\n\n\n9\nOG Anunoby\n0.471\n0.744\n0.6\n\n\n10\nOtto Porter Jr.\n0.478\n0.797\n0.6\n\n\n11\nPascal Siakam\n0.487\n0.774\n0.6\n\n\n12\nPrecious Achiuwa\n0.474\n0.605\n0.5\n\n\n13\nRon Harper Jr.\n0.500\n1.000\n0.8\n\n\n14\nScottie Barnes\n0.473\n0.755\n0.6\n\n\n15\nThaddeus Young\n0.503\n0.663\n0.6\n\n\n16\nWill Barton\n0.430\n0.787\n0.6",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Creating New Columns"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02D-new-columns.html#talk-about-it",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02D-new-columns.html#talk-about-it",
    "title": "Creating New Columns",
    "section": "Talk About It",
    "text": "Talk About It\n\nWhy might you want to create new columns instead of only using the data that’s already provided?\nWhat are some risks of creating new columns (for example, introducing errors if you calculate incorrectly)?\nHow can rounding or formatting improve the readability of new data?",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Creating New Columns"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02D-new-columns.html#lesson-notebook",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02D-new-columns.html#lesson-notebook",
    "title": "Creating New Columns",
    "section": "Lesson Notebook",
    "text": "Lesson Notebook\nNow it’s your turn to practice: The notebook version of this lesson includes more examples of adding and formatting new columns.\nOpen the lesson here.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Creating New Columns"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02B-filtering.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02B-filtering.html",
    "title": "Filtering the Data",
    "section": "",
    "text": "In this lesson, we’ll learn how to filter data in a Pandas DataFrame. Filtering lets you focus on what’s important — whether that’s specific seasons, certain statistics, or rows that meet particular conditions.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Filtering the Data"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02B-filtering.html#when-to-filter-data",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02B-filtering.html#when-to-filter-data",
    "title": "Filtering the Data",
    "section": "When to Filter Data",
    "text": "When to Filter Data\nDatasets often contain more information than we need. Filtering allows us to narrow things down, making it easier to see patterns and answer specific questions.\nFor example, we might want to only look at seasons before a certain year, or just the rows where a player’s free throw percentage was above 75%.\n\nStep 1 — Import Libraries and Load Data\nWe’ll use Pandas to load Pascal Siakam’s basketball data from a CSV file into a DataFrame.\n\n\nCode\n# Setup\nimport pandas as pd\n\n# Input: Load Pascal Siakam's data into a DataFrame\nurl = \"https://raw.githubusercontent.com/pbeens/Data-Dunkers/main/Data/Pascal_Siakam.csv\"\ndf = pd.read_csv(url)\n\n# Preview the first few rows\ndf.head()\n\n\n\n\n\n\n\n\n\nPLAYER_ID\nSEASON_ID\nLEAGUE_ID\nTEAM_ID\nTEAM_ABBREVIATION\nPLAYER_AGE\nGP\nGS\nMIN\nFGM\n...\nREB\nAST\nSTL\nBLK\nTOV\nPF\nPTS\nFG2M\nFG2A\nFG2_PCT\n\n\n\n\n0\n1627783\n2016-17\n0\n1610612761\nTOR\n23.0\n55\n38\n859.0\n103\n...\n185\n17\n26\n45\n33\n109\n229\n102\n198\n0.515\n\n\n1\n1627783\n2017-18\n0\n1610612761\nTOR\n24.0\n81\n5\n1679.0\n253\n...\n364\n159\n62\n42\n67\n166\n589\n224\n366\n0.612\n\n\n2\n1627783\n2018-19\n0\n1610612761\nTOR\n25.0\n80\n79\n2548.0\n519\n...\n549\n248\n73\n52\n154\n241\n1354\n440\n731\n0.602\n\n\n3\n1627783\n2019-20\n0\n1610612761\nTOR\n26.0\n60\n60\n2110.0\n500\n...\n439\n207\n61\n53\n148\n170\n1371\n369\n739\n0.499\n\n\n4\n1627783\n2020-21\n0\n1610612761\nTOR\n27.0\n56\n56\n2006.0\n437\n...\n405\n250\n64\n37\n130\n174\n1196\n364\n715\n0.509\n\n\n\n\n5 rows × 30 columns\n\n\n\n\n\nStep 2 — Filter Rows\nWe can filter the DataFrame to only include seasons up to 2022–23.\n\n\nCode\n# Filter to include only seasons up to 2022-23\ndf = df[df[\"SEASON_ID\"] &lt;= \"2022-23\"]\n\n# Display the filtered DataFrame\ndf\n\n\n\n\n\n\n\n\n\nPLAYER_ID\nSEASON_ID\nLEAGUE_ID\nTEAM_ID\nTEAM_ABBREVIATION\nPLAYER_AGE\nGP\nGS\nMIN\nFGM\n...\nREB\nAST\nSTL\nBLK\nTOV\nPF\nPTS\nFG2M\nFG2A\nFG2_PCT\n\n\n\n\n0\n1627783\n2016-17\n0\n1610612761\nTOR\n23.0\n55\n38\n859.0\n103\n...\n185\n17\n26\n45\n33\n109\n229\n102\n198\n0.515\n\n\n1\n1627783\n2017-18\n0\n1610612761\nTOR\n24.0\n81\n5\n1679.0\n253\n...\n364\n159\n62\n42\n67\n166\n589\n224\n366\n0.612\n\n\n2\n1627783\n2018-19\n0\n1610612761\nTOR\n25.0\n80\n79\n2548.0\n519\n...\n549\n248\n73\n52\n154\n241\n1354\n440\n731\n0.602\n\n\n3\n1627783\n2019-20\n0\n1610612761\nTOR\n26.0\n60\n60\n2110.0\n500\n...\n439\n207\n61\n53\n148\n170\n1371\n369\n739\n0.499\n\n\n4\n1627783\n2020-21\n0\n1610612761\nTOR\n27.0\n56\n56\n2006.0\n437\n...\n405\n250\n64\n37\n130\n174\n1196\n364\n715\n0.509\n\n\n5\n1627783\n2021-22\n0\n1610612761\nTOR\n28.0\n68\n68\n2578.0\n596\n...\n580\n360\n85\n42\n181\n225\n1551\n521\n989\n0.527\n\n\n6\n1627783\n2022-23\n0\n1610612761\nTOR\n29.0\n71\n71\n2652.0\n630\n...\n556\n415\n65\n36\n169\n228\n1720\n537\n1026\n0.523\n\n\n\n\n7 rows × 30 columns\n\n\n\nWe can also filter using conditions on specific statistics. For example, rows where Siakam’s free throw percentage (FT_PCT) was above 75%.\n\n\nCode\n# Filter to include rows where FT% &gt; 75\ndf[df[\"FT_PCT\"] &gt; 0.75]\n\n\n\n\n\n\n\n\n\nPLAYER_ID\nSEASON_ID\nLEAGUE_ID\nTEAM_ID\nTEAM_ABBREVIATION\nPLAYER_AGE\nGP\nGS\nMIN\nFGM\n...\nREB\nAST\nSTL\nBLK\nTOV\nPF\nPTS\nFG2M\nFG2A\nFG2_PCT\n\n\n\n\n2\n1627783\n2018-19\n0\n1610612761\nTOR\n25.0\n80\n79\n2548.0\n519\n...\n549\n248\n73\n52\n154\n241\n1354\n440\n731\n0.602\n\n\n3\n1627783\n2019-20\n0\n1610612761\nTOR\n26.0\n60\n60\n2110.0\n500\n...\n439\n207\n61\n53\n148\n170\n1371\n369\n739\n0.499\n\n\n4\n1627783\n2020-21\n0\n1610612761\nTOR\n27.0\n56\n56\n2006.0\n437\n...\n405\n250\n64\n37\n130\n174\n1196\n364\n715\n0.509\n\n\n6\n1627783\n2022-23\n0\n1610612761\nTOR\n29.0\n71\n71\n2652.0\n630\n...\n556\n415\n65\n36\n169\n228\n1720\n537\n1026\n0.523\n\n\n\n\n4 rows × 30 columns\n\n\n\n\n\nStep 3 — Combine Multiple Conditions\nWe can combine filters using & (and) or | (or).\n\n\nCode\n# Filter rows where FT% &gt; 75 and GS == GP (started every game)\ndf[(df[\"FT_PCT\"] &gt; 0.75) & (df[\"GS\"] == df[\"GP\"])]\n\n\n\n\n\n\n\n\n\nPLAYER_ID\nSEASON_ID\nLEAGUE_ID\nTEAM_ID\nTEAM_ABBREVIATION\nPLAYER_AGE\nGP\nGS\nMIN\nFGM\n...\nREB\nAST\nSTL\nBLK\nTOV\nPF\nPTS\nFG2M\nFG2A\nFG2_PCT\n\n\n\n\n3\n1627783\n2019-20\n0\n1610612761\nTOR\n26.0\n60\n60\n2110.0\n500\n...\n439\n207\n61\n53\n148\n170\n1371\n369\n739\n0.499\n\n\n4\n1627783\n2020-21\n0\n1610612761\nTOR\n27.0\n56\n56\n2006.0\n437\n...\n405\n250\n64\n37\n130\n174\n1196\n364\n715\n0.509\n\n\n6\n1627783\n2022-23\n0\n1610612761\nTOR\n29.0\n71\n71\n2652.0\n630\n...\n556\n415\n65\n36\n169\n228\n1720\n537\n1026\n0.523\n\n\n\n\n3 rows × 30 columns\n\n\n\nComparison operators in Python include:\n\n&gt; greater than\n&lt; less than\n== equal to\n!= not equal to\n&gt;= greater than or equal to\n&lt;= less than or equal to\n& and\n| or",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Filtering the Data"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02B-filtering.html#talk-about-it",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02B-filtering.html#talk-about-it",
    "title": "Filtering the Data",
    "section": "Talk About It",
    "text": "Talk About It\n\nWhy is filtering useful when working with a large dataset?\nWhat kinds of questions can you answer by filtering rows?\nHow might combining multiple conditions (&, |) help you refine your analysis further?",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Filtering the Data"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02B-filtering.html#lesson-notebook",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02B-filtering.html#lesson-notebook",
    "title": "Filtering the Data",
    "section": "Lesson Notebook",
    "text": "Lesson Notebook\nNow it’s your turn to practice: The notebook version of this lesson includes more filtering examples and practice activities.\nOpen the lesson here.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Filtering the Data"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/index.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/index.html",
    "title": "Overview",
    "section": "",
    "text": "Choose how students will bring data into a pandas DataFrame. Pick the on-ramp that matches your setup (self-contained internal data, CSV, Excel, Google Sheets, or a simple table from the web).",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/index.html#using-internal-data",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/index.html#using-internal-data",
    "title": "Overview",
    "section": "Using Internal Data",
    "text": "Using Internal Data\nThis lesson is for classes that want self-contained data inside the notebook or Python program—create small tables from lists or dictionaries with pandas.DataFrame, name the columns, and preview with head().\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/data-from-internal.ipynb.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/index.html#data-from-csv-files",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/index.html#data-from-csv-files",
    "title": "Overview",
    "section": "Data from CSV Files",
    "text": "Data from CSV Files\nLoad a shared or local CSV using pd.read_csv(...), then take a quick look at shape, column names, and a few rows to confirm what came in before moving on.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/data-from-csv.ipynb.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/index.html#data-from-excel-files",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/index.html#data-from-excel-files",
    "title": "Overview",
    "section": "Data from Excel Files",
    "text": "Data from Excel Files\nBring in Excel data with pd.read_excel(...); choose a sheet if needed and preview a few rows—handy when teachers share XLSX templates.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/data-from-excel.ipynb.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/index.html#data-from-google-sheets",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/index.html#data-from-google-sheets",
    "title": "Overview",
    "section": "Data from Google Sheets",
    "text": "Data from Google Sheets\nUse a Google Sheet’s share/export link (CSV export is simplest) so pandas can read it like a regular CSV; verify headers and sample rows.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/data-from-google-sheet.ipynb.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/index.html#data-from-webpages",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/index.html#data-from-webpages",
    "title": "Overview",
    "section": "Data from Webpages",
    "text": "Data from Webpages\nUse pd.read_html(...) to fetch a simple HTML table from a webpage into a DataFrame; if multiple tables are found, pick the right one and preview a few rows.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/data-from-webpage.ipynb.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01D-import-google-sheets.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01D-import-google-sheets.html",
    "title": "Importing Data From a Google Sheet",
    "section": "",
    "text": "In this lesson, we’ll learn how to import and work with data stored in a Google Sheet. Google Sheets are popular because they’re free, easy to share, and cloud-based, which makes them a convenient way to publish and access data.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From a Google Sheet"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01D-import-google-sheets.html#when-to-use-a-google-sheet",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01D-import-google-sheets.html#when-to-use-a-google-sheet",
    "title": "Importing Data From a Google Sheet",
    "section": "When to Use a Google Sheet",
    "text": "When to Use a Google Sheet\nGoogle Sheets are useful when you want to work with data that is shared online and updated regularly. They can be used much like CSV files once you generate the correct link.\nTo load a Google Sheet into Python, the sheet must be set to Anyone with the link can view. Then the URL is adjusted so it ends with:\n/export?format=csv\nThis tells Pandas to treat the Google Sheet as if it were a CSV file.\n\nStep 1 — Import Libraries and Load Google Sheet Data\nIn this step, we bring in the tools we need (pandas for working with tables, plotly.express for charts) and load a dataset directly from a Google Sheet link.\n\n\nCode\n# Setup\nimport plotly.express as px\nimport pandas as pd\n\n# Input: Read the Google Sheet (shared as CSV) into a DataFrame\nurl = \"https://docs.google.com/spreadsheets/d/1ZULKhYzsMd4eYwiprsyGgE9Df3gaVtO8WRalUQDn-xE/export?format=csv\"\ndf = pd.read_csv(url)\n\n\n\n\nStep 2 — Preview the Data\nAs always, it’s good to take a quick look at the data to confirm it is loaded correctly.\n\n\nCode\n# Preview the first few rows\ndf.head()\n\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n0\n0\n\n\n1\n1\n1\n\n\n2\n2\n4\n\n\n3\n3\n9\n\n\n4\n4\n16\n\n\n\n\n\n\n\nCheck that the columns and rows appear as expected.\n\n\nStep 3 — Plot the Data\nOnce the data is loaded, plotting works the same way as with CSV or Excel files.\n\n\nCode\n# Create a line plot\npx.line(df, x=\"X\", y=\"Y\", title=\"Data from a Google Sheet\")",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From a Google Sheet"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01D-import-google-sheets.html#talk-about-it",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01D-import-google-sheets.html#talk-about-it",
    "title": "Importing Data From a Google Sheet",
    "section": "Talk About It",
    "text": "Talk About It\n\nWhy might someone choose to share data in a Google Sheet instead of a CSV or Excel file?\nWhat are the advantages of being able to update a dataset online (like in a Google Sheet) compared to using a static file?\nWhat potential issues could you run into when working with shared Google Sheets?",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From a Google Sheet"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01D-import-google-sheets.html#lesson-notebook",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01D-import-google-sheets.html#lesson-notebook",
    "title": "Importing Data From a Google Sheet",
    "section": "Lesson Notebook",
    "text": "Lesson Notebook\nNow it’s your turn to practice: The notebook version of this lesson includes exercises where you’ll load real basketball data from Google Sheets and create your own plots.\nOpen the lesson here.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From a Google Sheet"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01B-import-csv.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01B-import-csv.html",
    "title": "Importing Data From a CSV File",
    "section": "",
    "text": "In this lesson, we’ll learn how to import and work with a CSV (Comma Separated Values) file — a simple text format where data is stored in rows, with each value separated by a comma. They are one of the most common formats for datasets, and knowing how to handle them is an essential skill for data analysis.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From a CSV File"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01B-import-csv.html#when-to-use-a-csv-file",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01B-import-csv.html#when-to-use-a-csv-file",
    "title": "Importing Data From a CSV File",
    "section": "When to Use a CSV File",
    "text": "When to Use a CSV File\nCSV files are lightweight, widely supported, and easy to share across different programs, which makes them ideal for bringing external data into Python. They’re also one of the most common formats used by open data websites, such as Open Government Canada and the U.S. Data.gov portal.\n\nStep 1 — Import Libraries and Load CSV Data\nIn this step, we bring in the tools we need (pandas for working with tables, plotly.express for charts) and load a dataset directly from a CSV file.\n\n\nCode\n# Setup\nimport plotly.express as px\nimport pandas as pd\n\n# Input: Read the CSV file into a DataFrame named df\nurl = \"https://raw.githubusercontent.com/pbeens/Data-Dunkers/main/Data/x-y-data.csv\"\ndf = pd.read_csv(url)\n\n\nWe now have our data stored in a Pandas DataFrame, which gives us labeled columns and rows we can easily manipulate.\n\n\nStep 2 — Preview the Data\nBefore analyzing or plotting, it’s important to confirm the data looks as expected. Pandas provides quick functions like head() and tail() to peek at the data.\n\n\nCode\n# Preview the first few rows\ndf.head()\n\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n0\n0\n\n\n1\n1\n1\n\n\n2\n2\n4\n\n\n3\n3\n9\n\n\n4\n4\n16\n\n\n\n\n\n\n\n\n\nCode\n# Preview the last 2 rows\ndf.tail(2)\n\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n4\n4\n16\n\n\n5\n5\n25\n\n\n\n\n\n\n\nYou’ll see that Pandas has also inserted an index column on the left. We won’t use it here, but it’s helpful for keeping track of rows.\nWe can also check which columns are available:\n\n\nCode\n# Display the column names\ndf.columns\n\n\nIndex(['X', 'Y'], dtype='object')\n\n\nAlways pay attention to capitalization, since Python is case-sensitive and treats X and x as different names.\n\n\nStep 3 — Plot the Data\nWith the data loaded and verified, we can now create a plot. This is almost identical to how we plotted internal data earlier, but now we must specify which DataFrame the columns come from.\n\n\nCode\n# Create a line plot directly\npx.line(df, x=\"X\", y=\"Y\", title=\"Data from a CSV File\")\n\n\n                            \n                                            \n\n\nAnother option is to save the chart to a variable and then show it:\n\n\nCode\nfig = px.line(df, x=\"X\", y=\"Y\", title=\"Data from a CSV File\")\nfig.show()\n\n\n                            \n                                            \n\n\n\n\nStep 4 — Put It All Together\nHere’s the full program, showing the setup, input, process, and output in one block:\n\n\nCode\n# Setup\nimport plotly.express as px\nimport pandas as pd\n\n# Input\nurl = \"https://raw.githubusercontent.com/pbeens/Data-Dunkers/main/Data/x-y-data.csv\"\ndf = pd.read_csv(url)\n\n# Process\nfig = px.line(data_frame=df, x=\"X\", y=\"Y\", title=\"Data from a CSV File\")\n\n# Output\nfig.show()",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From a CSV File"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01B-import-csv.html#talk-about-it",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01B-import-csv.html#talk-about-it",
    "title": "Importing Data From a CSV File",
    "section": "Talk About It",
    "text": "Talk About It\n\nWhat advantages do CSV files have compared to embedding data directly in code?\nWhy is it important to preview your data before plotting?\nHow might renaming columns improve the readability of your code and charts?",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From a CSV File"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01B-import-csv.html#lesson-notebook",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01B-import-csv.html#lesson-notebook",
    "title": "Importing Data From a CSV File",
    "section": "Lesson Notebook",
    "text": "Lesson Notebook\nNow it’s your turn to practice: The notebook version of this lesson includes an exercise where you’ll load real basketball data from a CSV file and create your own plots.\nOpen the lesson here.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From a CSV File"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/index.html",
    "href": "module-3-implementation-in-your-context/index.html",
    "title": "Module 3 – Implementation in Your Context",
    "section": "",
    "text": "This module helps you tailor Data Dunkers to your class. You’ll align activities to the Ontario curriculum, choose the right datasets and themes, map an instructional flow, and set up facilitation so students thrive. If you want to go deeper, you can branch into a Coding Lab focused on basketball data."
  },
  {
    "objectID": "module-3-implementation-in-your-context/index.html#what-you-will-do-and-learn",
    "href": "module-3-implementation-in-your-context/index.html#what-you-will-do-and-learn",
    "title": "Module 3 – Implementation in Your Context",
    "section": "What you will do and learn",
    "text": "What you will do and learn\n\nAlign selected activities to curriculum expectations and student goals.\nChoose datasets and sports themes that fit your learners.\nMap an instructional flow and scaffolds for your context.\nPlan grouping and facilitation for a data-driven classroom.\n(Optional) Explore a Coding Lab path to extend technical depth."
  },
  {
    "objectID": "module-3-implementation-in-your-context/index.html#how-to-use-this-module",
    "href": "module-3-implementation-in-your-context/index.html#how-to-use-this-module",
    "title": "Module 3 – Implementation in Your Context",
    "section": "How to use this module",
    "text": "How to use this module\n\nStart with the Planning Toolkit to design your implementation.\nIf desired, add the Coding Lab sub-menu for deeper technical work.\nWrap with the Implementation Checklist to finalize your launch plan."
  },
  {
    "objectID": "module-3-implementation-in-your-context/index.html#planning-toolkit",
    "href": "module-3-implementation-in-your-context/index.html#planning-toolkit",
    "title": "Module 3 – Implementation in Your Context",
    "section": "Planning Toolkit",
    "text": "Planning Toolkit\n\nAlign Activities to Curriculum\nSelect Datasets and Sports Themes\nMap Instructional Flow\nGrouping & Facilitation Strategies\nImplementation Checklist"
  },
  {
    "objectID": "module-3-implementation-in-your-context/index.html#optional-deep-dive-paths",
    "href": "module-3-implementation-in-your-context/index.html#optional-deep-dive-paths",
    "title": "Module 3 – Implementation in Your Context",
    "section": "Optional: Deep-Dive Paths",
    "text": "Optional: Deep-Dive Paths\n\nCoding Lab: Basketball Data\n\nImport & Prepare Data (CSV, Sheets)\n\nVisualize Shots & Trends (bar, line, scatter)\n\nStats Toolbox (percentages, mean/median)\n\nPlayer Comparisons (side-by-side views)\n\nBuild a Mini Dashboard\n\n\n(Links for Coding Lab pages will appear once those files are added to the repo.)"
  },
  {
    "objectID": "module-3-implementation-in-your-context/index.html#outcomes",
    "href": "module-3-implementation-in-your-context/index.html#outcomes",
    "title": "Module 3 – Implementation in Your Context",
    "section": "Outcomes",
    "text": "Outcomes\nBy the end of Module 3, you will have: - a classroom-ready plan aligned to curriculum, - a set of datasets and activities matched to your students, - a clear flow and facilitation approach, - optional extensions for deeper coding experiences."
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/03-map-instructional-flow.html",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/03-map-instructional-flow.html",
    "title": "Map Instructional Flow",
    "section": "",
    "text": "Here’s the same previous format, with your updated times applied.",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Map Instructional Flow"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/03-map-instructional-flow.html#prerequisites-at-a-glance",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/03-map-instructional-flow.html#prerequisites-at-a-glance",
    "title": "Map Instructional Flow",
    "section": "Prerequisites at a Glance",
    "text": "Prerequisites at a Glance\n\nFirst timer: Jupyter Notebook Demo → one Input lesson → one Output lesson\nAny Process lesson expects at least one Input lesson first\nScatter/line usually benefits from Statistics (to talk about trend/center/variation)",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Map Instructional Flow"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/03-map-instructional-flow.html#quick-start-flow-recipes",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/03-map-instructional-flow.html#quick-start-flow-recipes",
    "title": "Map Instructional Flow",
    "section": "Quick-Start Flow Recipes",
    "text": "Quick-Start Flow Recipes\n\nA) “First Run” (≈60 min)\n\nGoal: get everyone from raw data to one clear chart with a takeaway\nFlow:\n\nJupyter Notebook Demo (10 min, teacher-led)\nData from a CSV File (15 min)\nColumns (15 min)\nBar Graphs or Scatter Plots (15 min)\n1–2 sentence insight + share-out (≈5 min)\n\n\n\nNeed a true 45 min option? Skip either Columns or swap CSV → Within the Notebook to trim setup time.\n\n\n\nB) 2×45 “Explore → Explain”\n\nPeriod 1 (Explore): Notebook Demo (10) → Google Sheet (10–15) → Columns (15) → Bar Graphs (15)\nPeriod 2 (Explain): Filtering (15) → Statistics (10–15) → Scatter (15) → Quick gallery walk (5)\n\n\n\nC) 3×45 “Collect → Analyze → Tell the Story”\n\nPeriod 1: Class data collection → Data from a CSV (import class file, 15)\nPeriod 2: Columns (15) → Filtering (15) → Statistics (10–15)\nPeriod 3: Scatter (15) or Bar (15) → Draft captions → 1-slide share-out\n\n\n\nD) Half-Day FUNdamentals (≈2.5–3 hrs)\n\nBlock 1 (60–70): Demo (10) → CSV (15) → Columns (15) → Bar/Scatter (15)\nBlock 2 (60–70): Filtering (15) → Statistics (10–15) → Second chart (Bar/Scatter 15) or Histograms (10–15)\nBlock 3 (30–40): Synthesis poster (chart + insight) → 1-minute standups",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Map Instructional Flow"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/03-map-instructional-flow.html#menu-builder-with-time-estimates",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/03-map-instructional-flow.html#menu-builder-with-time-estimates",
    "title": "Map Instructional Flow",
    "section": "Menu Builder with Time Estimates",
    "text": "Menu Builder with Time Estimates\n\n\n\n\n\n\n\n\n\nStep\nLesson\nTypical Time\nNotes\n\n\n\n\n0\nJupyter Notebook Demo\n10 min\nTeacher-led walkthrough\n\n\n1\nData from a CSV File\n15 min\nFastest on-ramp for local files\n\n\n1\nData from a Google Sheet\n10–15 min\nGreat for shared class data\n\n\n1\nData from a Webpage\n15–20 min\nMay require light cleaning\n\n\n1\nData from an Excel File\n10–15 min\nUseful if .xlsx is on hand\n\n\n1\nData from Within the Notebook\n8–10 min\nRemoves file friction\n\n\n2\nColumns (explore/select)\n15 min\nUpdated per your call\n\n\n2\nFiltering Our Data\n15 min\nUpdated per your call\n\n\n2\nSorting Our Data\n6–8 min\nOften quick once columns are known\n\n\n2\nAdding New Columns\n10–15 min\nRatios/percents or simple formulas\n\n\n2\nStatistics\n10–15 min\nMean/median/min/max, describe()\n\n\n3\nBar Graphs\n15 min\nUpdated per your call\n\n\n3\nScatter Plots\n15 min\nUpdated per your call\n\n\n3\nLine Graphs\n12–18 min\nConsider time for axis choices\n\n\n3\nPie Charts\n10–12 min\nKeep categories small\n\n\n3\nHistograms\n10–15 min\nBin-choice discussion adds time",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Map Instructional Flow"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/01-align-activities-to-curriculum.html",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/01-align-activities-to-curriculum.html",
    "title": "Align Activities to Curriculum and Student Goals",
    "section": "",
    "text": "One of the most powerful ways to make Data Dunkers stick in your classroom is to connect each activity to explicit curriculum expectations. This ensures the time spent on basketball data is not just fun, but also advancing mandated learning outcomes.\nIn this section, we will:",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Align Activities to Curriculum and Student Goals"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/01-align-activities-to-curriculum.html#why-curriculum-alignment-matters",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/01-align-activities-to-curriculum.html#why-curriculum-alignment-matters",
    "title": "Align Activities to Curriculum and Student Goals",
    "section": "Why Curriculum Alignment Matters",
    "text": "Why Curriculum Alignment Matters\nCurriculum alignment makes it clear that:\n\nData Dunkers is not an “add-on,” but a vehicle for meeting existing math goals.\n\nStudents build transferable skills — working with data, coding, and problem-solving — while engaging with basketball.\n\nYou can integrate Data Dunkers into units on data literacy, algebra, or financial literacy without rewriting your whole program.",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Align Activities to Curriculum and Student Goals"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/01-align-activities-to-curriculum.html#curriculum-connections-by-grade",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/01-align-activities-to-curriculum.html#curriculum-connections-by-grade",
    "title": "Align Activities to Curriculum and Student Goals",
    "section": "Curriculum Connections by Grade",
    "text": "Curriculum Connections by Grade\n\nGrade 9 (2021 Curriculum)\nStrand D: Data\n\nD1.2 Represent and statistically analyse data from a real-life situation involving a single variable in various ways (e.g., quartile values, box plots).\n→ Data Dunkers: Students calculate shot success rates and visualize them using bar charts and box plots.\nD1.3 Create a scatter plot to represent the relationship between two variables and test regression models.\n→ Data Dunkers: Students compare shooting percentage to distance, fit a line of best fit, and interpret the trend.\n\nStrand C: Algebra (Coding Integration)\n\nC2.2 Create code by decomposing situations into computational steps in order to represent mathematical concepts and relationships.\n→ Data Dunkers: Students use Python notebooks to filter and sort basketball data, then generate plots automatically.\n\n\n\nGrade 10 (2005 Curriculum)\nLinear Relations Strand\n\nCollect data, graph it, determine the equation of a line of best fit, and use it to solve problems.\n→ Data Dunkers: Students use scatter plots of shot success vs. distance, then apply line of best fit to predict outcomes.\n\nData Management Strand\n\nUse data management techniques to investigate relationships and solve problems.\n→ Data Dunkers: Students summarize player stats and use averages/percentages to compare performance.\n\n\n\nGrades 11–12 (2007 Curriculum)\nMathematics of Data Management (MDM4U)\n\nOrganize data using charts, tables, and graphs.\n\nApply measures of central tendency and variability to analyze sets of data.\n→ Data Dunkers: Students create multi-variable dashboards (e.g., shooting accuracy by quarter, by player, by distance).\n\nFoundations for College Mathematics (MAP4C / MBF3C)\n\nCollect, display, and analyze data involving one or two variables.\n\nInterpret statistical measures in context.\n→ Data Dunkers: Students design and present infographics summarizing team statistics.",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Align Activities to Curriculum and Student Goals"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/01-align-activities-to-curriculum.html#classroom-example",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/01-align-activities-to-curriculum.html#classroom-example",
    "title": "Align Activities to Curriculum and Student Goals",
    "section": "Classroom Example",
    "text": "Classroom Example\n\nExample: A Grade 9 class collects shot data from a free-throw drill. Students record makes/misses in a spreadsheet, import it into a Jupyter notebook, and produce a bar graph of success rates.\n\nCurriculum Link: Grade 9, D1.2 (Data Representation).\n\nExtension: Fit a trend line to success vs. shot distance (Grade 9, D1.3) and compare it to the theoretical model (Grade 10 Linear Relations).",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Align Activities to Curriculum and Student Goals"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/01-align-activities-to-curriculum.html#your-turn",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/01-align-activities-to-curriculum.html#your-turn",
    "title": "Align Activities to Curriculum and Student Goals",
    "section": "Your Turn",
    "text": "Your Turn\nReflect on your own teaching context:\n\nWhich Data Dunkers activities align with your grade level?\n\nWhich curriculum strands are you already required to cover that Data Dunkers could bring to life?\n\nHow might you present these connections to your students and administrators?",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Align Activities to Curriculum and Student Goals"
    ]
  },
  {
    "objectID": "module-2-step-into-the-game-experience-like-a-student/04-labyrinth-activity.html",
    "href": "module-2-step-into-the-game-experience-like-a-student/04-labyrinth-activity.html",
    "title": "Labyrinth Activity",
    "section": "",
    "text": "Next up — the Basketball Labyrinth! This activity is designed to get you into both looking at the data and doing some basic coding. Think of it as a virtual escape room: you’ll solve puzzles, uncover clues, and make your way through the data to reach the end.\nWe have another teacher who will walk you through the activity, but we recommend you also open the Basketball Labyrinth yourself to an external site. so you can explore and experience it firsthand.\n==NEED VIDEO EMBED INFO==",
    "crumbs": [
      "Home",
      "Module 2",
      "Labyrinth Activity"
    ]
  },
  {
    "objectID": "module-2-step-into-the-game-experience-like-a-student/02-data-is-everywhere.html",
    "href": "module-2-step-into-the-game-experience-like-a-student/02-data-is-everywhere.html",
    "title": "Data is Everywhere!",
    "section": "",
    "text": "To kick things off, we’ll look at how data drives decisions in basketball — and why that matters far beyond the court. Start by watching this video about a data scientist working in basketball.\n==NEED VIDEO EMBED INFO== (x2)",
    "crumbs": [
      "Home",
      "Module 2",
      "Data is Everywhere!"
    ]
  },
  {
    "objectID": "module-1-welcome-to-data-dunkers/05-creating-your-playbook.html",
    "href": "module-1-welcome-to-data-dunkers/05-creating-your-playbook.html",
    "title": "Creating your Playbook",
    "section": "",
    "text": "In basketball — and in data science — good decisions start with good information. This page is your chance to think through the best way to navigate the course, based on your needs and interests.\nWe’ve set up a Playlab chat bot to guide you. It will ask a few simple questions to help you decide where to jump in and what path might make the most sense for you. You only need to share as much information as you’re comfortable with — or you can skip it entirely and move on.\nThink of it as building your personal Data Dunkers Implementation Playbook, so you can get the most out of your time here.\n==ADD PLAYLAB CHAT BOT HERE OR MERELY HAVE THEM LOOK AT THE COURSE.==",
    "crumbs": [
      "Home",
      "Module 1",
      "Creating your Playbook"
    ]
  },
  {
    "objectID": "module-1-welcome-to-data-dunkers/03-flavors-of-the-program.html",
    "href": "module-1-welcome-to-data-dunkers/03-flavors-of-the-program.html",
    "title": "Flavors of the Program",
    "section": "",
    "text": "There’s more than one way to bring the Data Dunkers vision to life. Just like players can join a game in different roles, you can step in at the point that makes the most sense for you and your students. Throughout this course, we’ll explore practical ways to embed the program — whether you run it as a special event, stretch it into a unit, or weave pieces into your lessons over time.\n\n\n\nAlt text\n\n\n\nFUNdamentals – 2 half-days – A focused introduction to the core activities and concepts.\nUnit using FUNdamentals – Spread the activities across multiple class periods over several weeks.\nHack-a-thon – A high-energy, one-day or multi-day event where students tackle data challenges.\nEmbedded lessons – Integrate Data Dunkers activities into your regular curriculum throughout the year.\nProject – Launch a stand-alone project that connects data skills to real-world issues or student interests.\n\nFor the start of this course, we are going to use the entry point of the FUNdamentals — which you can run as a special event or embed the pieces of it into your class as a unit.",
    "crumbs": [
      "Home",
      "Module 1",
      "Flavors of the Program"
    ]
  },
  {
    "objectID": "module-1-welcome-to-data-dunkers/01-welcome.html",
    "href": "module-1-welcome-to-data-dunkers/01-welcome.html",
    "title": "Welcome to Data Dunkers!",
    "section": "",
    "text": "We’re excited to have you join the Data Dunkers Support Course — a space designed to help you bring the energy of sports and the power of data into your classroom. Here, you’ll explore flexible activities, ready-to-use tools, and real-world examples that make data science approachable and engaging for your students.\nBefore we dive in, listen in to Pascal Siakam’s welcome to students, showing his passion for this program. Pascal is not only an NBA Champion and 2025 Eastern Conference Finals MVP but most importantly, he deeply cares about our students’ future.",
    "crumbs": [
      "Home",
      "Module 1",
      "Welcome to Data Dunkers!"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Dunkers LMS",
    "section": "",
    "text": "This course focuses on how you can implement data science learning in your school setting in ways that fit your schedule, curriculum, and students by implementing Data Dunkers curriculum and support. We’ll start by exploring the core FUNdamentals approach—how it works, how it engages students through sports-themed data activities, and how to adapt it for different grade levels and classroom contexts.\nFrom there, participants will look at multiple ways to extend and deepen the experience, including:\nBy the end, participants will leave with a clear, adaptable game plan for bringing Data Dunkers to life—whether you run a short, focused experience or build toward more advanced, student-driven work."
  },
  {
    "objectID": "index.html#course-objectives",
    "href": "index.html#course-objectives",
    "title": "Data Dunkers LMS",
    "section": "Course Objectives",
    "text": "Course Objectives\nBy the end of this course, participants will be able to:\n\nUnderstand the Data Dunkers FUNdamentals model – Explain its structure, learning goals, and how it engages students in data science through sports contexts.\nIdentify implementation options – Select one or more ways to bring FUNdamentals into their school or program (e.g., short-term workshop, embedded lessons, after-school model).\nAdapt activities for context – Modify lesson plans, pacing, and resources to meet student needs, grade levels, and available time.\nExtend beyond the basics (optional) – Explore opportunities to integrate careers, advanced coding, AI tools, diverse data sets, or long-term projects.\nPlan for launch – Develop a clear, personalized implementation plan, including timeline, support needs, and expected student outcomes."
  },
  {
    "objectID": "index.html#success-criteria-for-participants",
    "href": "index.html#success-criteria-for-participants",
    "title": "Data Dunkers LMS",
    "section": "Success Criteria for Participants",
    "text": "Success Criteria for Participants\nParticipants will have successfully completed the course when they can:\n\nDescribe the key elements and purpose of the FUNdamentals program.\nSelect and justify an implementation pathway that fits their setting.\nDemonstrate readiness by adapting at least one FUNdamentals lesson or activity for their classroom.\nIdentify at least one possible extension (career connection, advanced coding, AI, diverse data set, or project-based work) that aligns with their teaching context.\nProduce a documented game plan that outlines:\n\nChosen model(s) for implementation.\nTimeline and pacing considerations.\nRequired supports and resources.\nExpected student learning outcomes.\n\n\n\n\n(Quarto Demo Site)"
  },
  {
    "objectID": "module-1-welcome-to-data-dunkers/02-what-is-data-dunkers.html",
    "href": "module-1-welcome-to-data-dunkers/02-what-is-data-dunkers.html",
    "title": "What Is Data Dunkers?",
    "section": "",
    "text": "Data isn’t just for scientists or statisticians — it’s becoming a core skill for success in almost every career. Whether in sports, healthcare, engineering, or creative industries, the ability to understand and use data is a game-changer for students’ futures.\nThe World Economic Forum lists data analysis and data science among the most in-demand skills in their Future of Jobs report, with demand only expected to grow in the years ahead. You can explore the report here: World Economic Forum – Future of Jobs Report\nWhy it matters for us as educators: Data science isn’t just about numbers — it’s about curiosity, problem-solving, and storytelling. In Data Dunkers, we use the excitement of sports to spark student interest, then connect those skills to real-world applications that prepare them for jobs and challenges we can’t even imagine yet.\nWatch the video below for Dell Technologies’ and PS43 Foundations overview on the Data Dunkers program.\n==NEED VIDEO EMBED INFO==",
    "crumbs": [
      "Home",
      "Module 1",
      "What Is Data Dunkers?"
    ]
  },
  {
    "objectID": "module-1-welcome-to-data-dunkers/04-the-fundamentals-game-plan.html",
    "href": "module-1-welcome-to-data-dunkers/04-the-fundamentals-game-plan.html",
    "title": "The FUNdamentals Game Plan",
    "section": "",
    "text": "Let’s take a look at the game plan for the FUNdamentals program. This is the core starting point for many Data Dunkers experiences — a focused, high-energy introduction to data science through the excitement of sports. You’ll see how the activities build skills step-by-step, keep students engaged, and connect learning to real-world applications. Watch the video below to see how it all comes together in action.\n==NEED VIDEO EMBED INFO==",
    "crumbs": [
      "Home",
      "Module 1",
      "The FUNdamentals Game Plan"
    ]
  },
  {
    "objectID": "module-2-step-into-the-game-experience-like-a-student/01-welcome-to-the-court.html",
    "href": "module-2-step-into-the-game-experience-like-a-student/01-welcome-to-the-court.html",
    "title": "Welcome to the Court",
    "section": "",
    "text": "The best way to understand how you might use Data Dunkers in your classroom is to first experience it like a student. In this section, you’ll step into their shoes — exploring activities, solving challenges, and seeing how data comes alive through sports.\nTo guide you through this part of the course, you’ll have a Virtual Coach. This coach will help you navigate the activities, offer prompts and tips, and keep you moving forward.\n==NEED VIDEO EMBED INFO==",
    "crumbs": [
      "Home",
      "Module 2",
      "Welcome to the Court"
    ]
  },
  {
    "objectID": "module-2-step-into-the-game-experience-like-a-student/03-quick-timeout-look-at-jupyter-notebook.html",
    "href": "module-2-step-into-the-game-experience-like-a-student/03-quick-timeout-look-at-jupyter-notebook.html",
    "title": "Quick Timeout: Look at Jupyter Notebook",
    "section": "",
    "text": "Before we get into our first BIG activity, we’re going to step out of the student role for a moment and give you, as a teacher, a quick look at one of the tools we’ll be using.\nWe usually embed this learning into the experience with the students, but we wanted to provide you with a greater explanation up front.\nWatch this short video explaining how Jupyter Notebooks work. We’ll use these for the next two activities, so this quick overview will help you understand how they’re set up and how you and your students can interact with them.\nWe’ve also included a link to a sample notebook to an external site. that contains some of the information we’ll discuss in the video — so you can actually try out the notebook environment for yourself.\n==NEED VIDEO EMBED INFO==",
    "crumbs": [
      "Home",
      "Module 2",
      "Quick Timeout: Look at Jupyter Notebook"
    ]
  },
  {
    "objectID": "module-2-step-into-the-game-experience-like-a-student/05-to-understanding-the-instructional-approach.html",
    "href": "module-2-step-into-the-game-experience-like-a-student/05-to-understanding-the-instructional-approach.html",
    "title": "TO: Understanding the Instructional Approach",
    "section": "",
    "text": "Before we move on, let’s take a quick time out to look at the instructional approach behind the Data Dunkers program. This short video will walk you through the thinking that shapes how we design activities, guide student learning, and connect data skills to real-world relevance.\nUnderstanding this approach will help you see how each part of the program builds both engagement and skill — and how you can adapt these strategies for your own students.\n==NEED VIDEO EMBED INFO==",
    "crumbs": [
      "Home",
      "Module 2",
      "TO: Understanding the Instructional Approach"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html",
    "title": "Select Datasets and Sports Themes",
    "section": "",
    "text": "The heart of Data Dunkers is the connection between sports and data. Choosing the right dataset and theme can make or break engagement in your classroom. In this section, we’ll explore strategies for selecting datasets that are both relevant to your students and aligned with curriculum goals.",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Select Datasets and Sports Themes"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#why-dataset-choice-matters",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#why-dataset-choice-matters",
    "title": "Select Datasets and Sports Themes",
    "section": "Why Dataset Choice Matters",
    "text": "Why Dataset Choice Matters\n\nStudents engage more deeply when the data feels personal or exciting.\n\nA well-chosen dataset highlights the math concepts you need to cover.\n\nVariety ensures you can adapt Data Dunkers to different grades, contexts, and student interests.",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Select Datasets and Sports Themes"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#sports-as-a-gateway",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#sports-as-a-gateway",
    "title": "Select Datasets and Sports Themes",
    "section": "Sports as a Gateway",
    "text": "Sports as a Gateway\nBasketball is the primary lens for Data Dunkers — but it doesn’t have to stop there. Consider:\n- Basketball shot data → success rates, distances, player comparisons.\n- Team statistics → rebounds, assists, turnovers, and points by quarter.\n- Crossover themes → comparing basketball to other sports students follow (soccer, hockey, baseball).\n\nTip: Even within basketball, you can switch perspectives — student-collected data (free throws, 3-point shots) vs. professional datasets (NBA or WNBA box scores).",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Select Datasets and Sports Themes"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#data-sources",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#data-sources",
    "title": "Select Datasets and Sports Themes",
    "section": "Data Sources",
    "text": "Data Sources\nHere are some dataset options you might build from:\n\nClassroom-collected data: Students shoot from 2, 4, 6, 8, and 10 feet and record results.\n\nProvided sample datasets: Pre-formatted CSVs with NBA player stats, Raptors shot logs, or historical game data.\n\nOpen data portals: Publicly available sports datasets (e.g., Basketball Reference, NBA Stats API) can add richness for older grades.",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Select Datasets and Sports Themes"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#matching-datasets-to-math-goals",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#matching-datasets-to-math-goals",
    "title": "Select Datasets and Sports Themes",
    "section": "Matching Datasets to Math Goals",
    "text": "Matching Datasets to Math Goals\n\nElementary (Grades 6–8): Use simple tallies and percentages. Example: “What percentage of free throws were made?”\n\nGrade 9: Compare two variables with scatter plots and lines of best fit (e.g., shot distance vs. accuracy).\n\nGrade 10: Investigate linear relations or extend into non-linear trends with quadratic modeling.\n\nGrades 11–12: Explore multi-variable analysis, probabilities, and statistical distributions using full game or season data.",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Select Datasets and Sports Themes"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#beyond-sports",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#beyond-sports",
    "title": "Select Datasets and Sports Themes",
    "section": "Beyond Sports",
    "text": "Beyond Sports\nAlthough basketball is the anchor, you can also experiment with:\n- Health datasets (student steps, heart rates, nutrition data).\n- Civic datasets (neighbourhood statistics, community surveys).\n- Social datasets (polls, social media trends).\nThe Data Dunkers model works as long as students can see themselves in the data and apply math concepts meaningfully.",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Select Datasets and Sports Themes"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#classroom-example",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#classroom-example",
    "title": "Select Datasets and Sports Themes",
    "section": "Classroom Example",
    "text": "Classroom Example\n\nExample: A Grade 10 teacher chooses to use NBA shot charts instead of classroom-collected data. Students graph attempts by distance, calculate success rates, and compare them with their own gym data.\n- Curriculum Link: Linear Relations and Data Management.\n- Student Engagement: Tapping into Raptors fandom boosts motivation.",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Select Datasets and Sports Themes"
    ]
  },
  {
    "objectID": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#your-turn",
    "href": "module-3-implementation-in-your-context/1-planning-toolkit/04-select-datasets-and-themes.html#your-turn",
    "title": "Select Datasets and Sports Themes",
    "section": "Your Turn",
    "text": "Your Turn\nThink about your students:\n- What sports or themes capture their interest?\n- What type of data is most practical for your class (collected in class, pre-made, or online)?\n- How might you adapt the dataset so that it connects naturally to your math goals?",
    "crumbs": [
      "Home",
      "Module 3",
      "Planning Toolkit",
      "Select Datasets and Sports Themes"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01A-internal-data.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01A-internal-data.html",
    "title": "Using Internal Data",
    "section": "",
    "text": "In this lesson series we’ll use five input locations: internal data defined directly in code, CSV files, Excel workbooks, Google Sheets (via a share/export link), and simple HTML tables from webpages.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Using Internal Data"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01A-internal-data.html#when-to-use-internal-data",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01A-internal-data.html#when-to-use-internal-data",
    "title": "Using Internal Data",
    "section": "When to Use Internal Data",
    "text": "When to Use Internal Data\nWhen you’re just starting out, one of the easiest ways to work with data is to include it directly inside your program or notebook. Since everything is written in the same place, you don’t need to worry about opening extra files or setting up outside sources.\nThis approach works best when your dataset is small, maybe just a few rows of numbers or categories. It keeps things simple and lets you focus on how the data is being used, not on file management. Another bonus is that you can define both the column names and the values right in your code, making the table’s structure clear and easy to control.\n\nStep 1 — Import Libraries and Embed Data\nIn this step, we bring in needed tools (libraries) and define a simple dataset entirely in code.\n\n\nCode\n# Import the libraries we need\nimport pandas as pd\nimport plotly.express as px\n\n# Define simple data in code\nx_data = [0, 1, 2, 3, 4, 5]\ny_data = [0, 1, 4, 9, 16, 25]\nprint(x_data, y_data)\n\n\n[0, 1, 2, 3, 4, 5] [0, 1, 4, 9, 16, 25]\n\n\nThe two lists represent a basic relationship: each y is the square of the corresponding x. This kind of data is perfect for showing how tables and charts map numbers in columns → rows → plots.\n\n\nStep 2 — Create a DataFrame and Preview It\nIn this step, we turn the raw lists into a structured table (called a DataFrame) so it’s easier to see patterns and check for errors before plotting.\n\n\nCode\n# Create a DataFrame from the simple data, naming the columns\ndf = pd.DataFrame({\"x\": x_data, \"y\": y_data})\n\n\n\n\nCode\n# Preview the first few rows of the table\ndf.head()\n\n\n\n\n\n\n\n\n\nx\ny\n\n\n\n\n0\n0\n0\n\n\n1\n1\n1\n\n\n2\n2\n4\n\n\n3\n3\n9\n\n\n4\n4\n16\n\n\n\n\n\n\n\nYou’ll see two columns (“x” and “y”) and six rows. This preview lets you verify your data is embedded correctly — columns are clearly labeled, rows line up with the x and y pairs, and nothing unexpected (like wrong types) is hiding.\n\n\nStep 3 — Plot a Scatter Plot\nNow that you have a table, we’ll make a scatter plot to help us see how two variables relate (x vs. y here). Scatter plots are great for showing trends or patterns.\n\n\nCode\nfig = px.scatter(df, x=\"x\", y=\"y\", title=\"Example Scatter Plot: y = x²\")\nfig.show()\n\n\n                            \n                                            \n\n\nIn this plot, each point is one (x, y) pair. As x increases, you’ll see y increasing faster (because y = x²). This visual helps you check whether your entered data worked and gives you intuition about relationships.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Using Internal Data"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01A-internal-data.html#talk-about-it",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01A-internal-data.html#talk-about-it",
    "title": "Using Internal Data",
    "section": "Talk About It",
    "text": "Talk About It\n\nWhat do the column names (“x”, “y”) suggest about what each value means? How would you describe “x” and “y” to someone who knows nothing about this data?\nThe example uses simple numbers where y = x². If you changed “y” to something else (for example, z = x³ or y = 2x), how would the scatter plot change, and what questions could that let you ask?\nAre there limitations with data you’ve embedded in code (like this)? What is one thing this dataset can’t show you, and why?",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Using Internal Data"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01A-internal-data.html#lesson-notebook",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01A-internal-data.html#lesson-notebook",
    "title": "Using Internal Data",
    "section": "Lesson Notebook",
    "text": "Lesson Notebook\nNow it’s your turn to practice: The notebook version includes one exercise where you’ll use provided lists to plot Pascal Siakam’s field goals made over his Raptors career—applying the same setup → input → output flow you saw above.\nOpen the lesson here.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Using Internal Data"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01C-import-excel.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01C-import-excel.html",
    "title": "Importing Data From an Excel File",
    "section": "",
    "text": "In this lesson, we’ll learn how to import and work with data stored in an Excel spreadsheet. Excel files are common in schools, businesses, and research — and just like CSVs, they can be loaded into Python for analysis.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From an Excel File"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01C-import-excel.html#when-to-use-an-excel-file",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01C-import-excel.html#when-to-use-an-excel-file",
    "title": "Importing Data From an Excel File",
    "section": "When to Use an Excel File",
    "text": "When to Use an Excel File\nExcel files are useful when your data is already organized into worksheets or when it comes from systems that export in .xlsx format. They support multiple sheets, cell formatting, and formulas, but in most cases we just need the raw data inside.\nLoading Excel data into Python is very similar to loading CSV files — the main difference is that we use read_excel() instead of read_csv().\n\nStep 1 — Import Libraries and Load Excel Data\nIn this step, we bring in the tools we need (pandas for working with tables, plotly.express for charts) and load a dataset directly from an Excel file.\n\n\nCode\n# Setup\nimport plotly.express as px\nimport pandas as pd\n\n# Input: Read the Excel file into a DataFrame named df\nurl = \"https://github.com/Data-Dunkers/data/raw/refs/heads/main/demo/x-y-data.xlsx\"\ndf = pd.read_excel(url)\n\n\nWe now have our data stored in a Pandas DataFrame, just like when we used a CSV file.\n\n\nStep 2 — Preview the Data\nBefore analyzing or plotting, it’s important to confirm the data looks as expected. Pandas provides quick functions like head() and tail() to peek at the data.\n\n\nCode\n# Preview the first few rows\ndf.head()\n\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n0\n0\n\n\n1\n1\n1\n\n\n2\n2\n4\n\n\n3\n3\n9\n\n\n4\n4\n16\n\n\n\n\n\n\n\n\n\nCode\n# Preview the last 2 rows\ndf.tail(2)\n\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n4\n4\n16\n\n\n5\n5\n25\n\n\n\n\n\n\n\nThis helps verify the data loaded properly, with the expected columns and rows.\n\n\nStep 3 — Plot the Data\nWith the data loaded and verified, we can now create a plot. The steps are almost identical to the CSV example, except that our input came from an Excel file.\n\n\nCode\n# Create a line plot\npx.line(df, x=\"X\", y=\"Y\", title=\"Data from an Excel File\")",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From an Excel File"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01C-import-excel.html#talk-about-it",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01C-import-excel.html#talk-about-it",
    "title": "Importing Data From an Excel File",
    "section": "Talk About It",
    "text": "Talk About It\n\nHow is using read_excel() similar to read_csv()?\nWhat are some reasons an organization might use Excel instead of CSV for storing data?\nWhat challenges could arise when working with Excel files (for example, multiple sheets, merged cells, or hidden formatting)?",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From an Excel File"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01C-import-excel.html#lesson-notebook",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01C-import-excel.html#lesson-notebook",
    "title": "Importing Data From an Excel File",
    "section": "Lesson Notebook",
    "text": "Lesson Notebook\nNow it’s your turn to practice: The notebook version of this lesson includes exercises where you’ll load basketball data from Excel and create your own plots.\nOpen the lesson here.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From an Excel File"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01E-import-webpage.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01E-import-webpage.html",
    "title": "Importing Data From a Webpage",
    "section": "",
    "text": "In this lesson, we’ll learn how to import and work with data stored in an HTML table on a webpage. Many websites publish statistics or datasets in tables, and with Python we can bring those tables directly into our code.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From a Webpage"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01E-import-webpage.html#when-to-use-a-webpage",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01E-import-webpage.html#when-to-use-a-webpage",
    "title": "Importing Data From a Webpage",
    "section": "When to Use a Webpage",
    "text": "When to Use a Webpage\nOne common use for webpages in data analysis is when they include tables — for example, sports stats, government data, or league standings. Pandas can read these tables directly from the page’s URL, saving time compared to copying and pasting.\nThe main difference from CSV or Excel is that webpages can have multiple tables. Pandas assigns an index to each table, starting at zero, and you choose the one you need.\n\nStep 1 — Import Libraries and Load Webpage Data\nIn this step, we bring in the tools we need (pandas for working with tables, plotly.express for charts) and load a dataset directly from a webpage.\n\n\nCode\n# Setup\nimport plotly.express as px\nimport pandas as pd\n\n# Input: Read the first table from the webpage into a DataFrame\nurl = \"https://github.com/Data-Dunkers/data/raw/refs/heads/main/demo/x-y-data.html\"\ndf = pd.read_html(url)[0]   # Index 0 means the first table on the page\n\n\n\n\nStep 2 — Preview the Data\nCheck that the data was loaded correctly.\n\n\nCode\n# Preview the first few rows\ndf.head()\n\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\n0\n0\n0\n\n\n1\n1\n1\n\n\n2\n2\n4\n\n\n3\n3\n9\n\n\n4\n4\n16\n\n\n\n\n\n\n\nConfirm that the columns and rows line up with the table you expected.\n\n\nStep 3 — Plot the Data\nOnce the table is loaded, we can plot it just like any other DataFrame.\n\n\nCode\n# Create a line plot\npx.line(df, x=\"X\", y=\"Y\", title=\"Data from a Webpage Table\")",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From a Webpage"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01E-import-webpage.html#talk-about-it",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01E-import-webpage.html#talk-about-it",
    "title": "Importing Data From a Webpage",
    "section": "Talk About It",
    "text": "Talk About It\n\nWhy might it be useful to load data directly from a webpage instead of downloading it first?\nWhat challenges could you face if a webpage has multiple tables?\nWhat risks come with relying on webpages for data (for example, if the site changes its layout)?",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From a Webpage"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01E-import-webpage.html#lesson-notebook",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/01-input/01E-import-webpage.html#lesson-notebook",
    "title": "Importing Data From a Webpage",
    "section": "Lesson Notebook",
    "text": "Lesson Notebook\nNow it’s your turn to practice: The notebook version of this lesson includes exercises where you’ll load and visualize data from webpages.\nOpen the lesson here.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Input Data",
      "Importing Data From a Webpage"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02A-columns.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02A-columns.html",
    "title": "Working With Columns",
    "section": "",
    "text": "In this lesson, we’ll learn how to work with columns in a Pandas DataFrame. Columns represent the different variables or measurements in your dataset (like points scored, rebounds, or field goals made).",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Working With Columns"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02A-columns.html#when-to-work-with-columns",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02A-columns.html#when-to-work-with-columns",
    "title": "Working With Columns",
    "section": "When to Work With Columns",
    "text": "When to Work With Columns\nOften we don’t need an entire dataset — we just want to focus on certain variables. Pandas makes it easy to list all available columns, access specific ones, and even select multiple columns at once.\n\nStep 1 — Import Libraries and Load Data\nWe’ll use Pandas to load Pascal Siakam’s basketball data from a CSV file into a DataFrame.\n\n\nCode\n# Setup\nimport pandas as pd\n\n# Input: Load data into a DataFrame\nurl = \"https://github.com/Data-Dunkers/data/raw/refs/heads/main/NBA/Pascal_Siakam.csv\"\ndf = pd.read_csv(url)\n\n# Preview the first few rows\ndf.head()\n\n\n\n\n\n\n\n\n\nPLAYER_ID\nSEASON_ID\nLEAGUE_ID\nTEAM_ID\nTEAM_ABBREVIATION\nPLAYER_AGE\nGP\nGS\nMIN\nFGM\n...\nREB\nAST\nSTL\nBLK\nTOV\nPF\nPTS\nFG2M\nFG2A\nFG2_PCT\n\n\n\n\n0\n1627783\n2016-17\n0\n1610612761\nTOR\n23.0\n55\n38\n859.0\n103\n...\n185\n17\n26\n45\n33\n109\n229\n102\n198\n0.515\n\n\n1\n1627783\n2017-18\n0\n1610612761\nTOR\n24.0\n81\n5\n1679.0\n253\n...\n364\n159\n62\n42\n67\n166\n589\n224\n366\n0.612\n\n\n2\n1627783\n2018-19\n0\n1610612761\nTOR\n25.0\n80\n79\n2548.0\n519\n...\n549\n248\n73\n52\n154\n241\n1354\n440\n731\n0.602\n\n\n3\n1627783\n2019-20\n0\n1610612761\nTOR\n26.0\n60\n60\n2110.0\n500\n...\n439\n207\n61\n53\n148\n170\n1371\n369\n739\n0.499\n\n\n4\n1627783\n2020-21\n0\n1610612761\nTOR\n27.0\n56\n56\n2006.0\n437\n...\n405\n250\n64\n37\n130\n174\n1196\n364\n715\n0.509\n\n\n\n\n5 rows × 30 columns\n\n\n\n\n\nStep 2 — View the Columns\nYou can see which columns are available by using the .columns attribute.\n\n\nCode\n# List all the columns\ndf.columns\n\n\nIndex(['PLAYER_ID', 'SEASON_ID', 'LEAGUE_ID', 'TEAM_ID', 'TEAM_ABBREVIATION',\n       'PLAYER_AGE', 'GP', 'GS', 'MIN', 'FGM', 'FGA', 'FG_PCT', 'FG3M', 'FG3A',\n       'FG3_PCT', 'FTM', 'FTA', 'FT_PCT', 'OREB', 'DREB', 'REB', 'AST', 'STL',\n       'BLK', 'TOV', 'PF', 'PTS', 'FG2M', 'FG2A', 'FG2_PCT'],\n      dtype='object')\n\n\nYou can also use a Python for loop to print them one at a time.\n\n\nCode\n# Print each column name\nfor column in df.columns:\n    print(column)\n\n\nPLAYER_ID\nSEASON_ID\nLEAGUE_ID\nTEAM_ID\nTEAM_ABBREVIATION\nPLAYER_AGE\nGP\nGS\nMIN\nFGM\nFGA\nFG_PCT\nFG3M\nFG3A\nFG3_PCT\nFTM\nFTA\nFT_PCT\nOREB\nDREB\nREB\nAST\nSTL\nBLK\nTOV\nPF\nPTS\nFG2M\nFG2A\nFG2_PCT\n\n\n\n\nStep 3 — Select Specific Columns\nOnce you know the column names, you can focus on the ones you want.\n\n\nCode\n# Select a single column\ndf[\"FGM\"]\n\n\n0    103\n1    253\n2    519\n3    500\n4    437\n5    596\n6    630\n7    325\n8    203\n9    528\nName: FGM, dtype: int64\n\n\n\n\nCode\n# Select multiple columns\ndf[[\"FGM\", \"FGA\"]]\n\n\n\n\n\n\n\n\n\nFGM\nFGA\n\n\n\n\n0\n103\n205\n\n\n1\n253\n498\n\n\n2\n519\n945\n\n\n3\n500\n1104\n\n\n4\n437\n961\n\n\n5\n596\n1207\n\n\n6\n630\n1313\n\n\n7\n325\n623\n\n\n8\n203\n370\n\n\n9\n528\n993\n\n\n\n\n\n\n\nThis way you can zoom in on field goals made (FGM) and attempted (FGA) without looking at the rest of the dataset.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Working With Columns"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02A-columns.html#talk-about-it",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02A-columns.html#talk-about-it",
    "title": "Working With Columns",
    "section": "Talk About It",
    "text": "Talk About It\n\nWhy might you want to look at only a few columns instead of the entire dataset?\nHow does being able to list all the columns help you as a data analyst?\nIf a dataset has dozens of columns, how might you decide which ones are most important for your analysis?",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Working With Columns"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02A-columns.html#lesson-notebook",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02A-columns.html#lesson-notebook",
    "title": "Working With Columns",
    "section": "Lesson Notebook",
    "text": "Lesson Notebook\nNow it’s your turn to practice: The notebook version of this lesson includes exercises where you’ll explore columns, filter for specific stats, and practice selecting multiple fields.\nOpen the lesson here.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Working With Columns"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02C-sorting.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02C-sorting.html",
    "title": "Sorting the Data",
    "section": "",
    "text": "In this lesson, we’ll learn how to sort data in a Pandas DataFrame. Sorting helps us organize information, making it easier to compare values and spot patterns.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Sorting the Data"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02C-sorting.html#when-to-sort-data",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02C-sorting.html#when-to-sort-data",
    "title": "Sorting the Data",
    "section": "When to Sort Data",
    "text": "When to Sort Data\nSorting is useful when we want to find the highest or lowest values in a dataset or to arrange rows in a meaningful order. For example, we could sort by points scored to see a player’s best seasons first.\n\nStep 1 — Import Libraries and Load Data\nWe’ll use Pandas to load Pascal Siakam’s basketball data from a CSV file into a DataFrame, then narrow it down to a smaller set of essential columns so it’s easier to work with.\n\n\nCode\n# Setup\nimport pandas as pd\n\n# Input: Load Pascal Siakam's data into a DataFrame\nurl = \"https://raw.githubusercontent.com/pbeens/Data-Dunkers/main/Data/Pascal_Siakam.csv\"\ndf = pd.read_csv(url)\n\n# Reduce the DataFrame to essential columns\ncolumns = [\"SEASON_ID\", \"TEAM_ABBREVIATION\", \"GP\", \"GS\", \"MIN\", \"FGM\", \"FGA\", \"STL\", \"BLK\"]\ndf_small = df[columns]\n\n# Preview the first few rows\ndf_small.head()\n\n\n\n\n\n\n\n\n\nSEASON_ID\nTEAM_ABBREVIATION\nGP\nGS\nMIN\nFGM\nFGA\nSTL\nBLK\n\n\n\n\n0\n2016-17\nTOR\n55\n38\n859.0\n103\n205\n26\n45\n\n\n1\n2017-18\nTOR\n81\n5\n1679.0\n253\n498\n62\n42\n\n\n2\n2018-19\nTOR\n80\n79\n2548.0\n519\n945\n73\n52\n\n\n3\n2019-20\nTOR\n60\n60\n2110.0\n500\n1104\n61\n53\n\n\n4\n2020-21\nTOR\n56\n56\n2006.0\n437\n961\n64\n37\n\n\n\n\n\n\n\n\n\nStep 2 — Sort by a Single Column\nWe can sort the DataFrame by steals (STL). By default, sorting is ascending (lowest to highest).\n\n\nCode\n# Sort by steals in ascending order\ndf_small.sort_values(\"STL\")\n\n\n\n\n\n\n\n\n\nSEASON_ID\nTEAM_ABBREVIATION\nGP\nGS\nMIN\nFGM\nFGA\nSTL\nBLK\n\n\n\n\n8\n2023-24\nIND\n24\n24\n786.0\n203\n370\n17\n8\n\n\n0\n2016-17\nTOR\n55\n38\n859.0\n103\n205\n26\n45\n\n\n7\n2023-24\nTOR\n39\n39\n1354.0\n325\n623\n32\n10\n\n\n9\n2023-24\nTOT\n63\n63\n2140.0\n528\n993\n49\n18\n\n\n3\n2019-20\nTOR\n60\n60\n2110.0\n500\n1104\n61\n53\n\n\n1\n2017-18\nTOR\n81\n5\n1679.0\n253\n498\n62\n42\n\n\n4\n2020-21\nTOR\n56\n56\n2006.0\n437\n961\n64\n37\n\n\n6\n2022-23\nTOR\n71\n71\n2652.0\n630\n1313\n65\n36\n\n\n2\n2018-19\nTOR\n80\n79\n2548.0\n519\n945\n73\n52\n\n\n5\n2021-22\nTOR\n68\n68\n2578.0\n596\n1207\n85\n42\n\n\n\n\n\n\n\nTo sort in descending order (highest to lowest), add ascending=False.\n\n\nCode\n# Sort by steals in descending order\ndf_small.sort_values(\"STL\", ascending=False)\n\n\n\n\n\n\n\n\n\nSEASON_ID\nTEAM_ABBREVIATION\nGP\nGS\nMIN\nFGM\nFGA\nSTL\nBLK\n\n\n\n\n5\n2021-22\nTOR\n68\n68\n2578.0\n596\n1207\n85\n42\n\n\n2\n2018-19\nTOR\n80\n79\n2548.0\n519\n945\n73\n52\n\n\n6\n2022-23\nTOR\n71\n71\n2652.0\n630\n1313\n65\n36\n\n\n4\n2020-21\nTOR\n56\n56\n2006.0\n437\n961\n64\n37\n\n\n1\n2017-18\nTOR\n81\n5\n1679.0\n253\n498\n62\n42\n\n\n3\n2019-20\nTOR\n60\n60\n2110.0\n500\n1104\n61\n53\n\n\n9\n2023-24\nTOT\n63\n63\n2140.0\n528\n993\n49\n18\n\n\n7\n2023-24\nTOR\n39\n39\n1354.0\n325\n623\n32\n10\n\n\n0\n2016-17\nTOR\n55\n38\n859.0\n103\n205\n26\n45\n\n\n8\n2023-24\nIND\n24\n24\n786.0\n203\n370\n17\n8\n\n\n\n\n\n\n\n\n\nStep 3 — Sort by Multiple Columns\nWe can also sort by more than one column. For example, first by blocks (BLK) and then by steals (STL).\n\n\nCode\n# Sort by blocks first, then steals\ndf_small.sort_values([\"BLK\", \"STL\"])\n\n\n\n\n\n\n\n\n\nSEASON_ID\nTEAM_ABBREVIATION\nGP\nGS\nMIN\nFGM\nFGA\nSTL\nBLK\n\n\n\n\n8\n2023-24\nIND\n24\n24\n786.0\n203\n370\n17\n8\n\n\n7\n2023-24\nTOR\n39\n39\n1354.0\n325\n623\n32\n10\n\n\n9\n2023-24\nTOT\n63\n63\n2140.0\n528\n993\n49\n18\n\n\n6\n2022-23\nTOR\n71\n71\n2652.0\n630\n1313\n65\n36\n\n\n4\n2020-21\nTOR\n56\n56\n2006.0\n437\n961\n64\n37\n\n\n1\n2017-18\nTOR\n81\n5\n1679.0\n253\n498\n62\n42\n\n\n5\n2021-22\nTOR\n68\n68\n2578.0\n596\n1207\n85\n42\n\n\n0\n2016-17\nTOR\n55\n38\n859.0\n103\n205\n26\n45\n\n\n2\n2018-19\nTOR\n80\n79\n2548.0\n519\n945\n73\n52\n\n\n3\n2019-20\nTOR\n60\n60\n2110.0\n500\n1104\n61\n53",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Sorting the Data"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02C-sorting.html#talk-about-it",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02C-sorting.html#talk-about-it",
    "title": "Sorting the Data",
    "section": "Talk About It",
    "text": "Talk About It\n\nWhy is sorting a useful tool in data analysis?\nWhen would you want ascending order, and when would descending order make more sense?\nHow could sorting by multiple columns give you a deeper understanding of the data?",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Sorting the Data"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02C-sorting.html#lesson-notebook",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02C-sorting.html#lesson-notebook",
    "title": "Sorting the Data",
    "section": "Lesson Notebook",
    "text": "Lesson Notebook\nNow it’s your turn to practice: The notebook version of this lesson includes more sorting examples and activities.\nOpen the lesson here.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Sorting the Data"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02E-stats-toolbox.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02E-stats-toolbox.html",
    "title": "Summarizing with Statistics",
    "section": "",
    "text": "In this lesson, we’ll learn how to use Pandas to calculate some basic statistics that help summarize data quickly. Statistics like minimum, maximum, mean, and median can tell us a lot about a dataset at a glance.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Summarizing with Statistics"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02E-stats-toolbox.html#when-to-use-statistics",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02E-stats-toolbox.html#when-to-use-statistics",
    "title": "Summarizing with Statistics",
    "section": "When to Use Statistics",
    "text": "When to Use Statistics\nStatistics are useful whenever you want to describe a dataset in just a few numbers. Instead of looking through every row, you can use these tools to find patterns and compare values.\n\nStep 1 — Import Libraries and Load Data\nWe’ll use Pandas to load Raptors team data from a CSV file into a DataFrame.\n\n\nCode\n# Setup\nimport pandas as pd\n\n# Input: Load Raptors 2023 season data\nurl = \"https://github.com/Data-Dunkers/data/raw/refs/heads/main/NBA/raptors-2023.csv\"\ndf = pd.read_csv(url)\n\n# Reduce the DataFrame to essential columns\ncolumns = [\"Player\", \"Age\", \"G\", \"FG%\", \"PTS\"]\ndf_small = df[columns]\n\n# Preview\ndf_small.head()\n\n\n\n\n\n\n\n\n\nPlayer\nAge\nG\nFG%\nPTS\n\n\n\n\n0\nChristian Koloko\n22.0\n58.0\n0.480\n3.1\n\n\n1\nChris Boucher\n30.0\n307.0\n0.486\n9.1\n\n\n2\nDalano Banton\n23.0\n95.0\n0.416\n3.7\n\n\n3\nFred VanVleet\n28.0\n417.0\n0.402\n14.6\n\n\n4\nGary Trent Jr.\n24.0\n270.0\n0.421\n14.4\n\n\n\n\n\n\n\n\n\nStep 2 — Calculate Basic Statistics\nWe can calculate the minimum, maximum, mean, and median of a column using built-in functions.\n\n\nCode\n# Calculate statistics for the 'G' (Games Played) column\nprint(\"Minimum =\", df_small[\"G\"].min())\nprint(\"Maximum =\", df_small[\"G\"].max())\nprint(\"Median =\", int(df_small[\"G\"].median()))\nprint(\"Mean =\", df_small[\"G\"].mean().round(1))\n\n\nMinimum = 9.0\nMaximum = 1139.0\nMedian = 270\nMean = 315.8\n\n\nNotice how we used round(1) to round the mean to one decimal place, and int() to make the median a whole number.\n\n\nStep 3 — Generate Statistics for All Columns\nIf you want to see more, the .describe() function gives a full summary of statistics for all numeric columns.\n\n\nCode\n# Generate summary statistics for all numeric columns\ndf_small.describe().round(2)\n\n\n\n\n\n\n\n\n\nAge\nG\nFG%\nPTS\n\n\n\n\ncount\n17.00\n17.00\n17.00\n17.00\n\n\nmean\n25.88\n315.82\n0.46\n8.86\n\n\nstd\n3.77\n291.08\n0.07\n5.05\n\n\nmin\n21.00\n9.00\n0.33\n1.80\n\n\n25%\n23.00\n95.00\n0.42\n3.70\n\n\n50%\n25.00\n270.00\n0.47\n9.10\n\n\n75%\n28.00\n471.00\n0.49\n12.40\n\n\nmax\n34.00\n1139.00\n0.63\n17.00\n\n\n\n\n\n\n\nThis includes count, mean, standard deviation, minimum, quartiles, and maximum for each numeric column.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Summarizing with Statistics"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02E-stats-toolbox.html#talk-about-it",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02E-stats-toolbox.html#talk-about-it",
    "title": "Summarizing with Statistics",
    "section": "Talk About It",
    "text": "Talk About It\n\nWhy might you want to calculate statistics instead of looking through raw data?\nHow does rounding make the results easier to understand?\nWhen would a full .describe() summary be more useful than focusing on one column?",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Summarizing with Statistics"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02E-stats-toolbox.html#lesson-notebook",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/02E-stats-toolbox.html#lesson-notebook",
    "title": "Summarizing with Statistics",
    "section": "Lesson Notebook",
    "text": "Lesson Notebook\nNow it’s your turn to practice: The notebook version of this lesson includes more examples and additional formatting techniques.\nOpen the lesson here.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Summarizing with Statistics"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html",
    "title": "Overview",
    "section": "",
    "text": "Work with your table step by step—start by picking columns, then filter and sort to focus your view, add calculated fields, and use quick statistics to take the pulse of the data. Finish with a minimal clean-up pass so visuals and summaries are solid.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html#columns",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html#columns",
    "title": "Overview",
    "section": "Columns",
    "text": "Columns\nSelect and re-order the fields you need; explore df.columns (and a tiny for-loop) to understand your table’s structure.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/data-columns.ipynb",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html#filtering",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html#filtering",
    "title": "Overview",
    "section": "Filtering",
    "text": "Filtering\nFocus the table using boolean masks and simple AND/OR combinations, then carry the filtered result into later steps.\n*Corresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/data-filtering.ipynb)",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html#sorting",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html#sorting",
    "title": "Overview",
    "section": "Sorting",
    "text": "Sorting\nOrder rows by one or multiple keys (ascending/descending) to reveal patterns and make comparisons clearer.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/data-sorting.ipynb",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html#new-columns",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html#new-columns",
    "title": "Overview",
    "section": "New Columns",
    "text": "New Columns\nAdd calculated metrics (like shooting % or buckets) with concise, vectorized code to power meaningful analysis.\n*Corresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/data-new-columns.ipynb",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html#stats-toolbox",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html#stats-toolbox",
    "title": "Overview",
    "section": "Stats Toolbox",
    "text": "Stats Toolbox\nUse .describe(), quick aggregates, and groupby(...).agg(...) to compare players or distance buckets before you plot.\n*Corresponds with the lesson fo nd at: https://github.com/Data-Dunkers/lessons/blob/main/data-statistics.ipynb",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html#cleaning-basics",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/02-process/index.html#cleaning-basics",
    "title": "Overview",
    "section": "Cleaning Basics",
    "text": "Cleaning Basics\nDo a minimal clean-up (headers/case, numeric coercion, drop empty rows) once you know what your analysis needs.\nInformed by the table/analysis lessons above.",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Process Data",
      "Overview"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/03B-line-and-scatter.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/03B-line-and-scatter.html",
    "title": "Creating Line and Scatter Plots",
    "section": "",
    "text": "Show change or relationships: lines for trends over an ordered axis; scatter to explore how two variables move together.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/graphing-scatter-plots.ipynb.\n\nLesson coming soon!",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Output",
      "Creating Line and Scatter Plots"
    ]
  },
  {
    "objectID": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/03D-histograms.html",
    "href": "module-6-go-deeper-choose-your-path/03-going-further-with-coding/03-output/03D-histograms.html",
    "title": "Creating Histograms",
    "section": "",
    "text": "Reveal the distribution of a numeric variable (e.g., shot distance or points per game) to see clustering, spread, and outliers.\nCorresponds with the lesson found at: https://github.com/Data-Dunkers/lessons/blob/main/graphing-histograms.ipynb.\n\nLesson coming soon!",
    "crumbs": [
      "Home",
      "Module 6",
      "Going Further with Coding",
      "Output",
      "Creating Histograms"
    ]
  },
  {
    "objectID": "notebooks/data-from-internal.html",
    "href": "notebooks/data-from-internal.html",
    "title": "Getting Data from Within the Jupyter Notebook or .py File",
    "section": "",
    "text": "Open this notebook in Callysto | Colab."
  },
  {
    "objectID": "notebooks/data-from-internal.html#lesson-objectives",
    "href": "notebooks/data-from-internal.html#lesson-objectives",
    "title": "Getting Data from Within the Jupyter Notebook or .py File",
    "section": "Lesson Objectives",
    "text": "Lesson Objectives\nBy the end of this lesson, students will be able to: - Learn how to define and manipulate data directly within a program. (Example: Define lists of X and Y values directly in a Jupyter Notebook and use them to create a plot.) - Understand the basic flow of data through a program using the IPO model. (Example: Use the IPO (Input, Process, Output) model to structure a program that plots X and Y values.) - Create and enhance visual representations of data within a notebook. (Example: Use the Plotly Express library to create a line plot of X and Y values and add a title to the plot.)"
  },
  {
    "objectID": "notebooks/data-from-internal.html#introduction",
    "href": "notebooks/data-from-internal.html#introduction",
    "title": "Getting Data from Within the Jupyter Notebook or .py File",
    "section": "Introduction",
    "text": "Introduction\nThere are many ways we can import data, but the most common are from the program itself, a CSV (comma separated values) file, from an Excel spreadsheet, from a Google Sheet, or from a webpage.\nIn this demo, we will demonstrate how to get data from within the Jupyter Notebook itself."
  },
  {
    "objectID": "notebooks/data-from-internal.html#program-setup",
    "href": "notebooks/data-from-internal.html#program-setup",
    "title": "Getting Data from Within the Jupyter Notebook or .py File",
    "section": "Program Setup",
    "text": "Program Setup\nThis first code block may have to be run if the plotly.express library hasn’t already been installed. Once this has been done once, it will never have to be done again. You can skip it for now, but if you get an error message related to plotly.express not being installed, go ahead and run it.\n\n\nCode\n# only if necessary\n%pip install plotly -q\n\n\nNote: you may need to restart the kernel to use updated packages."
  },
  {
    "objectID": "notebooks/data-from-internal.html#setup",
    "href": "notebooks/data-from-internal.html#setup",
    "title": "Getting Data from Within the Jupyter Notebook or .py File",
    "section": "Setup",
    "text": "Setup\nWe always start any Python program by importing any libraries we might need. For our first example, we only need the plotly.express library.\nImporting libraries is performed by using the import command, like this:\n\n\nCode\n# import support libraries\nimport plotly.express as px\nprint('Libraries imported')\n\n\nLibraries imported\n\n\nThe line above the import command that starts with # is a comment and is ignored by the program. We add comments to make our program easier to understand."
  },
  {
    "objectID": "slides/intro.html#install-python",
    "href": "slides/intro.html#install-python",
    "title": "Data Dunkers Demo Slides",
    "section": "Install Python",
    "text": "Install Python\n\nDownload from python.org\nCheck “Add Python to PATH” during setup\nVerify:\npython --version\npip --version\nOptional: uninstall or remove older versions (e.g., Python 3.11)"
  },
  {
    "objectID": "slides/intro.html#install-quarto-cli",
    "href": "slides/intro.html#install-quarto-cli",
    "title": "Data Dunkers Demo Slides",
    "section": "Install Quarto CLI",
    "text": "Install Quarto CLI\n\nDownload from quarto.org/get-started\nRun installer (MSI for Windows)\nVerify installation:\nquarto --version\nquarto check\nIf needed, add Quarto bin folder to PATH"
  },
  {
    "objectID": "slides/intro.html#install-extra-python-packages",
    "href": "slides/intro.html#install-extra-python-packages",
    "title": "Data Dunkers Demo Slides",
    "section": "Install Extra Python Packages",
    "text": "Install Extra Python Packages\n\nIn terminal, run:\npip install jupyter pyyaml\nWhy install?\n\njupyter: enables running notebooks/code cells in Quarto\npyyaml: fixes YAML parsing error in Quarto checks\n\nVerify:\nquarto check"
  },
  {
    "objectID": "slides/intro.html#create-your-first-quarto-project",
    "href": "slides/intro.html#create-your-first-quarto-project",
    "title": "Data Dunkers Demo Slides",
    "section": "Create Your First Quarto Project",
    "text": "Create Your First Quarto Project\n\nIn terminal, run:\nquarto create-project \"Data Dunkers Quarto Test\" --type website\ncd \"Data Dunkers Quarto Test\"\nquarto preview"
  },
  {
    "objectID": "slides/intro.html#project-files",
    "href": "slides/intro.html#project-files",
    "title": "Data Dunkers Demo Slides",
    "section": "Project files",
    "text": "Project files\n\n_quarto.yml → site configuration\nindex.qmd → homepage\nabout.qmd → starter page"
  },
  {
    "objectID": "slides/intro.html#open-in-vs-code",
    "href": "slides/intro.html#open-in-vs-code",
    "title": "Data Dunkers Demo Slides",
    "section": "Open in VS Code",
    "text": "Open in VS Code\n\nOpen folder in VS Code: File → Open Folder…\nInstall Quarto extension (already installed ✅)\nEdit .qmd files with syntax highlighting\nPreview in browser or integrated panel"
  },
  {
    "objectID": "slides/intro.html#add-a-slideshow",
    "href": "slides/intro.html#add-a-slideshow",
    "title": "Data Dunkers Demo Slides",
    "section": "Add a Slideshow",
    "text": "Add a Slideshow\n\nCreate folder slides/\nAdd intro.qmd with front matter:\n---\ntitle: \"Data Dunkers Demo Slides\"\nformat: revealjs\n---\nEach --- in file makes a new slide\nLink slideshow in _quarto.yml navbar"
  },
  {
    "objectID": "slides/intro.html#publish-the-site",
    "href": "slides/intro.html#publish-the-site",
    "title": "Data Dunkers Demo Slides",
    "section": "Publish the Site",
    "text": "Publish the Site\n\nOption A: GitHub Pages\n\nCommit & push to GitHub\nAdd GitHub Action workflow for Quarto\nSite URL: https://pbeens.github.io/data-dunkers-quarto-test/\n\nOption B: Netlify\n\nConnect repo at netlify.com\nAuto-builds on push\nSite URL: https://data-dunkers-quarto-test.netlify.app/"
  },
  {
    "objectID": "slides/intro.html#summary",
    "href": "slides/intro.html#summary",
    "title": "Data Dunkers Demo Slides",
    "section": "Summary",
    "text": "Summary\n\n✅ Installed Python\n✅ Installed Quarto CLI\n✅ Installed Jupyter + PyYAML\n✅ Created and previewed Quarto project\n✅ Opened in VS Code\n✅ Added slideshow alongside website\n✅ Ready to publish demo site"
  }
]