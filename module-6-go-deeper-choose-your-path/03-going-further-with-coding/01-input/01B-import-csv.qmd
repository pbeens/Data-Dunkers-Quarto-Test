---
title: "Importing Data From a CSV File"
format:
  html:
    code-fold: show
jupyter: python3
---

In this lesson, we’ll learn how to import and work with a CSV (Comma Separated Values) file — a simple text format where data is stored in rows, with each value separated by a comma. They are one of the most common formats for datasets, and knowing how to handle them is an essential skill for data analysis.

## When to Use a CSV File

CSV files are lightweight, widely supported, and easy to share across different programs, which makes them ideal for bringing external data into Python. They’re also one of the most common formats used by open data websites, such as [Open Government Canada](https://open.canada.ca/en/open-data) and the U.S. [Data.gov](https://data.gov/) portal.

### Step 1 — Import Libraries and Load CSV Data

In this step, we bring in the tools we need (`pandas` for working with tables, `plotly.express` for charts) and load a dataset directly from a CSV file.  

```{python}
# Setup
import plotly.express as px
import pandas as pd

# Input: Read the CSV file into a DataFrame named df
url = "https://raw.githubusercontent.com/pbeens/Data-Dunkers/main/Data/x-y-data.csv"
df = pd.read_csv(url)
```

We now have our data stored in a Pandas **DataFrame**, which gives us labeled columns and rows we can easily manipulate.

### Step 2 — Preview the Data

Before analyzing or plotting, it’s important to confirm the data looks as expected. Pandas provides quick functions like `head()` and `tail()` to peek at the data.

```{python}
# Preview the first few rows
df.head()
```

```{python}
# Preview the last 2 rows
df.tail(2)
```

You’ll see that Pandas has also inserted an index column on the left. We won’t use it here, but it’s helpful for keeping track of rows.

We can also check which columns are available:

```{python}
# Display the column names
df.columns
```

Always pay attention to capitalization, since Python is case-sensitive and treats `X` and `x` as different names.

### Step 3 — Plot the Data

With the data loaded and verified, we can now create a plot. This is almost identical to how we plotted internal data earlier, but now we must specify which DataFrame the columns come from.

```{python}
# Create a line plot directly
px.line(df, x="X", y="Y", title="Data from a CSV File")
```

Another option is to save the chart to a variable and then show it:

```{python}
fig = px.line(df, x="X", y="Y", title="Data from a CSV File")
fig.show()
```

### Step 4 — Put It All Together

Here’s the full program, showing the setup, input, process, and output in one block:

```{python}
# Setup
import plotly.express as px
import pandas as pd

# Input
url = "https://raw.githubusercontent.com/pbeens/Data-Dunkers/main/Data/x-y-data.csv"
df = pd.read_csv(url)

# Process
fig = px.line(data_frame=df, x="X", y="Y", title="Data from a CSV File")

# Output
fig.show()
```

## Talk About It

* What advantages do CSV files have compared to embedding data directly in code?
* Why is it important to preview your data before plotting?
* How might renaming columns improve the readability of your code and charts?

## Lesson Notebook

Now it’s your turn to practice: The notebook version of this lesson includes an exercise where you’ll load real basketball data from a CSV file and create your own plots.

Open the lesson [here](https://github.com/Data-Dunkers/lessons/blob/main/data-from-csv.ipynb).
